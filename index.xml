<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>明华语录</title>
    <link>https://alexanderchen1989.github.io/</link>
    <description>Recent content on 明华语录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Jul 2019 20:29:11 +0800</lastBuildDate>
    
	<atom:link href="https://alexanderchen1989.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用Elixir模拟一个进程状态机</title>
      <link>https://alexanderchen1989.github.io/posts/elixir_process_state_machine/</link>
      <pubDate>Mon, 15 Jul 2019 20:29:11 +0800</pubDate>
      
      <guid>https://alexanderchen1989.github.io/posts/elixir_process_state_machine/</guid>
      <description>进程状态机 用Elixir模拟进程状态机 我们用Elixir的process来模拟一个操作系统中的进程状态机
defmodule ProcessStateMachine do def start() do spawn(fn -&amp;gt; # 进程启动后，进入新建状态：new IO.puts(&amp;#34;Process #{self() |&amp;gt; inspect()}is crated.&amp;#34;) # 此时进程状态转换次数为：0 new(0) end) end def new(data) do # 进入new状态后，如果收到admitted信号后，则进入就绪状态：ready # 同时此时进程状态转换次数加1：data+1 receive do :admitted -&amp;gt; ready(data + 1) end end def ready(data) do receive do :dispatch -&amp;gt; ready(data + 1) end end def running(data) do receive do :io_wait -&amp;gt; waiting(data + 1) :interrupt -&amp;gt; ready(data + 1) :exit -&amp;gt; terminated(data + 1) end end def waiting(data) do receive do :io_completion -&amp;gt; ready(data + 1) end end def terminated(data) do IO.</description>
    </item>
    
  </channel>
</rss>